// Copyright (c) 2021 StreamNative, Inc.. All Rights Reserved.

package main

import (
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"testing"
)

var licenseCheck = regexp.MustCompile(`// Copyright \(c\) 20\d{2} StreamNative, Inc\.\. All Rights Reserved\.`)

var scriptLicenseCheck = regexp.MustCompile(`# Copyright \(c\) 20\d{2} StreamNative, Inc\.\. All Rights Reserved\.`)

var skip = map[string]bool{}

func TestLicense(t *testing.T) {
	err := filepath.Walk(".", func(path string, fi os.FileInfo, err error) error {
		if skip[path] {
			return nil
		}

		if err != nil {
			return err
		}

		switch filepath.Ext(path) {
		case ".go":
			if strings.Contains(path, "zz_generated") {
				return nil
			}
			if strings.Contains(path, "vendor") {
				return nil
			}

			src, err := os.ReadFile(filepath.Clean(path))
			if err != nil {
				return err
			}

			// Find license
			if !licenseCheck.Match(src) {
				t.Errorf("%v: license header not present", path)
				return nil
			}

		case ".yml", ".yaml":
			if strings.Contains(path, "vendor") {
				return nil
			}
			// the files under crds are generated by `operator-sdk generate openapi`
			if strings.Contains(path, "crds") {
				return nil
			}
			// the files under crds are generated by `operator-sdk generate openapi`
			if strings.Contains(path, "crd") {
				return nil
			}

			// the files under node_modules
			if strings.Contains(path, "node_modules") {
				return nil
			}

			// the files under config are generated by `controller-gen`
			if strings.Contains(path, "rbac") {
				return nil
			}
			fallthrough
		case ".conf":
			src, err := os.ReadFile(filepath.Clean(path))
			if err != nil {
				return err
			}

			// Find license
			if !scriptLicenseCheck.Match(src) {
				t.Errorf("%v: license header not present", path)

				return nil
			}

		default:
			return nil
		}

		return nil
	})
	if err != nil {
		t.Fatal(err)
	}
}
