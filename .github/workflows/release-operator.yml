# Copyright 2022 StreamNative
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release operator

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-?*'

jobs:
  build:
    name: Build image and bundle
    runs-on: ubuntu-latest
    env:
      GOPRIVATE: github.com/streamnative
      ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      IMAGE_TAG_BASE: docker.cloudsmith.io/streamnative/operators/pulsar-resources-operator
      IMAGE_TAG_BASE_QUAY: quay.io/streamnativeio/pulsar-resources-operator
      REDHAT_API_KEY: ${{ secrets.REDHAT_API_KEY }}
    outputs:
      version: ${{ steps.redhat.outputs.version }}
      channels: ${{ steps.redhat.outputs.channels }}
      default_channel: ${{ steps.redhat.outputs.default_channel }}

    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'
        id: go

      - name: Set up Git token
        run: |
          git config --global url."https://${ACCESS_TOKEN}:@github.com/".insteadOf "https://github.com/"

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Setup operator-sdk
        run: |
          wget https://github.com/operator-framework/operator-sdk/releases/download/v1.31.0/operator-sdk_linux_amd64 -O operator-sdk
          chmod +x operator-sdk
          mv operator-sdk /usr/local/bin/
          operator-sdk version

      - name: Login to CloudSmith
        uses: docker/login-action@v2
        with:
          registry: docker.cloudsmith.io
          username: ${{ secrets.CLOUDSMITH_USERNAME }}
          password: ${{ secrets.CLOUDSMITH_PASSWORD }}

      - name: Login to Quay
        uses: docker/login-action@v2
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_DOCKER_USERNAME }}
          password: ${{ secrets.QUAY_DOCKER_PASSWORD }}

      - name: Build
        run: |
          _tag_version=${GITHUB_REF##*/}
          export VERSION=${_tag_version/v/}
          echo $_tag_version, $VERSION
          export IMG=$IMAGE_TAG_BASE:v$VERSION
          make docker-build
          make docker-push
          make bundle
          make bundle-build
          make bundle-push

      - name: Build image And Publish to Quay
        id: redhat
        run: |
          _tag_version=${GITHUB_REF##*/}
          export VERSION=${_tag_version/v/}
          echo $_tag_version, $VERSION
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          export IMG=$IMAGE_TAG_BASE_QUAY:v$VERSION
          export IMG_LATEST=$IMAGE_TAG_BASE_QUAY:latest
          make docker-build-redhat
          wget https://github.com/redhat-openshift-ecosystem/openshift-preflight/releases/download/1.9.6/preflight-linux-amd64 -O preflight
          chmod +x preflight
          mv preflight /usr/local/bin
          preflight -v
          make docker-push-redhat
          make redhat-preflight-check-image
          make report-preflight-check-result

          export BUNDLE_IMG=$IMAGE_TAG_BASE_QUAY-bundle:v$VERSION
          export CHANNELS=alpha,beta,stable
          export DEFAULT_CHANNEL=alpha
          echo "channels=$CHANNELS" >> $GITHUB_OUTPUT
          echo "default_channel=$DEFAULT_CHANNEL" >> $GITHUB_OUTPUT
          make bundle-redhat
          make bundle-build
          make bundle-push

  operatorhub:
    name: Create PR to the operatorhub
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Sync up the upstream
        env:
          GITHUB_TOKEN: ${{ secrets.SNBOT_GITHUB_TOKEN }}
        run: |
          gh repo sync streamnative/community-operators

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Checkout streamnative community-operators
        uses: actions/checkout@v3
        with:
          repository: streamnative/community-operators
          path: community-operators
          token: ${{ secrets.SNBOT_GITHUB_TOKEN }}

      - name: Setup operator-sdk
        run: |
          wget https://github.com/operator-framework/operator-sdk/releases/download/v1.31.0/operator-sdk_linux_amd64 -O operator-sdk
          chmod +x operator-sdk
          mv operator-sdk /usr/local/bin/
          operator-sdk version

      - name: Genarate bundle
        env:
          VERSION: ${{ needs.build.outputs.version }}
          CHANNELS: ${{ needs.build.outputs.channels }}
          DEFAULT_CHANNEL: ${{ needs.build.outputs.default_channel }}
          IMAGE_TAG_BASE_RELEASE: olm.streamnative.io/streamnativeio/pulsar-resources-operator
        run: |
          export IMG=$IMAGE_TAG_BASE_RELEASE:v$VERSION
          make bundle-redhat

      - name: Copy bundle to community-operators and create pr
        env:
          GITHUB_TOKEN: ${{ secrets.SNBOT_GITHUB_TOKEN }}
          VERSION: ${{ needs.build.outputs.version }}
          OPERATOR_NAME: pulsar-resources-operator
        run: |
          pushd community-operators
          git config --global user.email "streamnativebot@streamnative.io"
          git config --global user.name "streamnativebot"
          git push -d origin $OPERATOR_NAME-$VERSION || echo 'Skip branch deletion'
          git checkout -b $OPERATOR_NAME-$VERSION

          export TARGET_DIR=operators/$OPERATOR_NAME/$VERSION
          mkdir -p $TARGET_DIR
          cp -rf ../bundle.Dockerfile $TARGET_DIR
          cp -rf ../bundle/* $TARGET_DIR

          git add .
          git commit -s -m "operator $OPERATOR_NAME ($VERSION)"
          git push --set-upstream origin $OPERATOR_NAME-$VERSION
          gh pr create --title "operator $OPERATOR_NAME ($VERSION)" -F ../.github/operatorhub/community-operators -R k8s-operatorhub/community-operators
          popd